<?php

namespace Bdloc\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\QueryBuilder;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository
{

    public function countBooks()
	{

	   $query = $this->createQueryBuilder('b')
	                  ->select('COUNT(b)')     
	                  ->getQuery();
	           
	  return $query->getSingleScalarResult();
	}

	public function getBooks($page, $nombreParPage = "", $direction = 'DESC', $entity = 'b.dateCreated', $series = array())
    {

        $qb = $this->getEntityManager()->createQueryBuilder();

        			  // requête des BDs, auteurs & séries de BD
        			  $qb->select(array('b', 'a', 's'))
        			  ->from('Bdloc\AppBundle\Entity\Book', 'b')
        			  ->leftJoin('b.illustrator', 'a')
        			  ->leftJoin('b.serie', 's');

        			  // Je boucle sur mes séries
        			  for( $i = 0; $i < count($series); $i++) {

        			  	// Je récupère l'intitulé de la série
        			  	$param = $series[$i]->getStyle();

        			  		// Clause where le style = au style demandé par l'utilisateur
				    		$qb->orWhere ('s.style = :serie' . $i . '');
				    		// Paramètre nommé avec les données reçues
				    		$qb->setParameter('serie' . $i , $param);
				

				      }
        	          $qb->setFirstResult(($page-1) * $nombreParPage)
        			  ->setMaxResults($nombreParPage)
        			  ->orderBy($entity, $direction)
                      ;


        return $qb->getQuery()->getResult();
    }



	public function findBookWithTitle($title)
    {

        $query = $this->createQueryBuilder('b')
                      ->where('b.title LIKE :title')
                      ->setParameters(array('title' => '%' . $title . '%'))
                      ->getQuery();

        return $query->getResult();
    }	

}
